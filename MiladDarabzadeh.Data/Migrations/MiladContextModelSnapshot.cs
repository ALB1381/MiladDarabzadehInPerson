// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiladDarabzadeh.Data.Context;

#nullable disable

namespace MiladDarabzadeh.Data.Migrations
{
    [DbContext(typeof(MiladContext))]
    partial class MiladContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.Connections.CourseModelConnection", b =>
                {
                    b.Property<int>("CMCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CMCId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<byte>("ModelId")
                        .HasColumnType("TINYINT");

                    b.HasKey("CMCId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModelId");

                    b.ToTable("ModelConnections");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CourseTags")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("CourseUrl")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("DemoFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateOnly>("FirstTimeMadeDate")
                        .HasColumnType("date");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<byte>("LevelId")
                        .HasColumnType("TINYINT");

                    b.Property<bool>("LoanPayments")
                        .HasColumnType("bit");

                    b.Property<byte?>("MaxAge")
                        .HasColumnType("TINYINT");

                    b.Property<byte?>("MinAge")
                        .HasColumnType("TINYINT");

                    b.Property<string>("NamesOfTheBooks")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<byte?>("RangeOfIELTSInThisCourse")
                        .HasColumnType("TINYINT");

                    b.Property<byte?>("RangeOfListeningInThisCourse")
                        .HasColumnType("TINYINT");

                    b.Property<byte?>("RangeOfReadingInThisCourse")
                        .HasColumnType("TINYINT");

                    b.Property<byte?>("RangeOfSpeakingInThisCourse")
                        .HasColumnType("TINYINT");

                    b.Property<byte?>("RangeOfWritingInThisCourse")
                        .HasColumnType("TINYINT");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SubGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplementId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SubGroupId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.CourseCycle", b =>
                {
                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<byte>("CycleModelId")
                        .HasColumnType("TINYINT");

                    b.Property<int>("CyclePrice")
                        .HasColumnType("int");

                    b.Property<string>("CycleTitle")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<byte>("NumberOfSessions")
                        .HasColumnType("TINYINT");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("CycleId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CycleModelId");

                    b.HasIndex("DiscountId");

                    b.ToTable("CourseCycls");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.CourseGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("GroupTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("ParentId");

                    b.ToTable("CourseGroups");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.CourseLevel", b =>
                {
                    b.Property<byte>("LevelId")
                        .HasColumnType("TINYINT");

                    b.Property<string>("LevelColor")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("LevelTitle")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("LevelId");

                    b.ToTable("CourseLevels");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.CourseModel", b =>
                {
                    b.Property<byte>("CourseModelId")
                        .HasColumnType("TINYINT");

                    b.Property<string>("ModelTitle")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("CourseModelId");

                    b.ToTable("CourseModels");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.CycleModel", b =>
                {
                    b.Property<byte>("CycleModelId")
                        .HasColumnType("TINYINT");

                    b.Property<string>("ModelTitle")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("CycleModelId");

                    b.ToTable("CycleModels");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.SubCycle", b =>
                {
                    b.Property<int>("SubCycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCycleId"));

                    b.Property<int>("CourseCycleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SesionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubCycleId");

                    b.HasIndex("CourseCycleId");

                    b.ToTable("SubCycls");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Discount.CourseDiscount", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("DiscountTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte>("DisocuntPercentage")
                        .HasColumnType("TINYINT");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("DiscountId");

                    b.ToTable("CourseDiscounts");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Discount.OrderDiscount", b =>
                {
                    b.Property<int>("OrderDiscounId")
                        .HasColumnType("int");

                    b.Property<int?>("AvaibleCount")
                        .HasColumnType("int");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<byte?>("Percentage")
                        .HasColumnType("TINYINT");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("PriceLimite")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("OrderDiscounId");

                    b.ToTable("OrderDiscounts");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Order.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFinally")
                        .HasColumnType("bit");

                    b.Property<int>("Sum")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Order.SubOrder", b =>
                {
                    b.Property<int>("SubOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubOrderId"));

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<int>("CyclePrice")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("SubOrderId");

                    b.HasIndex("CycleId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderId");

                    b.ToTable("SubOrders");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.User.Connections.RolePermissionConnection", b =>
                {
                    b.Property<int>("RPCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RPCId"));

                    b.Property<byte>("PermissionId")
                        .HasColumnType("TINYINT");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RPCId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionConnections");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.User.Permission", b =>
                {
                    b.Property<byte>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("PermissionId"));

                    b.Property<string>("PermissionTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.User.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleTitle = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleTitle = "Student"
                        });
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.User.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserActiveCodeForEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserActiveCodeForPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserAvatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("UserNandF")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("UserRegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            IsActived = true,
                            RoleId = 1,
                            UserActiveCodeForEmail = "0569d3e33ac94bcc8c5ee4f93320db45",
                            UserActiveCodeForPhoneNumber = "0569d3e33ac94bcc8c5ee4f93320db45",
                            UserAvatar = "Defult.jpg",
                            UserEmail = "Milad.tutor@gmail.com",
                            UserName = "MiladDarabzadeh",
                            UserNandF = "Milad Darabzadeh",
                            UserPassword = "62-D5-ED-C9-B0-AD-74-B5-AE-96-2E-5F-7F-C7-91-51",
                            UserPhoneNumber = "09139279581",
                            UserRegisterDate = new DateTime(2024, 7, 24, 3, 30, 36, 261, DateTimeKind.Local).AddTicks(988)
                        },
                        new
                        {
                            UserId = 2,
                            IsActived = true,
                            RoleId = 1,
                            UserActiveCodeForEmail = "c53eac7994034d13a36e475e1e00fcac",
                            UserActiveCodeForPhoneNumber = "c53eac7994034d13a36e475e1e00fcac",
                            UserAvatar = "cc4129b2b7db4c1ea499fa5a6208df5d.jpg",
                            UserEmail = "alibarzegar013@gmail.com",
                            UserName = "AliBarzegar",
                            UserNandF = "Ali Barzegar",
                            UserPassword = "0C-0B-33-26-C9-5A-66-D7-37-7A-0A-2F-75-DA-AC-34",
                            UserPhoneNumber = "09397894663",
                            UserRegisterDate = new DateTime(2024, 7, 24, 3, 30, 36, 261, DateTimeKind.Local).AddTicks(997)
                        });
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.Connections.CourseModelConnection", b =>
                {
                    b.HasOne("MiladDarabzadeh.Data.Entities.Course.Course", "Course")
                        .WithMany("CourseModelConnections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MiladDarabzadeh.Data.Entities.Course.CourseModel", "CourseModel")
                        .WithMany("CourseModelConnections")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CourseModel");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.Course", b =>
                {
                    b.HasOne("MiladDarabzadeh.Data.Entities.Course.CourseGroup", "CourseGroup")
                        .WithMany("GroupOfCourses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MiladDarabzadeh.Data.Entities.Course.CourseLevel", "CourseLevel")
                        .WithMany("Courses")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MiladDarabzadeh.Data.Entities.Course.CourseGroup", "CourseSubGroup")
                        .WithMany("SubGroupsOfCourse")
                        .HasForeignKey("SubGroupId");

                    b.HasOne("MiladDarabzadeh.Data.Entities.User.User", "User")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseGroup");

                    b.Navigation("CourseLevel");

                    b.Navigation("CourseSubGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.CourseCycle", b =>
                {
                    b.HasOne("MiladDarabzadeh.Data.Entities.Course.Course", "Course")
                        .WithMany("CourseCycles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MiladDarabzadeh.Data.Entities.Course.CycleModel", "CycleModel")
                        .WithMany("CourseCycle")
                        .HasForeignKey("CycleModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MiladDarabzadeh.Data.Entities.Discount.CourseDiscount", "CourseDiscount")
                        .WithMany("CourseCycles")
                        .HasForeignKey("DiscountId");

                    b.Navigation("Course");

                    b.Navigation("CourseDiscount");

                    b.Navigation("CycleModel");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.CourseGroup", b =>
                {
                    b.HasOne("MiladDarabzadeh.Data.Entities.Course.CourseGroup", null)
                        .WithMany("courseGroups")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.SubCycle", b =>
                {
                    b.HasOne("MiladDarabzadeh.Data.Entities.Course.CourseCycle", "CourseCycle")
                        .WithMany("SubCycles")
                        .HasForeignKey("CourseCycleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseCycle");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Order.Order", b =>
                {
                    b.HasOne("MiladDarabzadeh.Data.Entities.Discount.OrderDiscount", "OrderDiscount")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountId");

                    b.HasOne("MiladDarabzadeh.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderDiscount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Order.SubOrder", b =>
                {
                    b.HasOne("MiladDarabzadeh.Data.Entities.Course.CourseCycle", "CourseCycle")
                        .WithMany("SubOrders")
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MiladDarabzadeh.Data.Entities.Discount.CourseDiscount", "CourseDiscount")
                        .WithMany("SubOrders")
                        .HasForeignKey("DiscountId");

                    b.HasOne("MiladDarabzadeh.Data.Entities.Order.Order", "Order")
                        .WithMany("SubOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseCycle");

                    b.Navigation("CourseDiscount");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.User.Connections.RolePermissionConnection", b =>
                {
                    b.HasOne("MiladDarabzadeh.Data.Entities.User.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MiladDarabzadeh.Data.Entities.User.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.User.User", b =>
                {
                    b.HasOne("MiladDarabzadeh.Data.Entities.User.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.Course", b =>
                {
                    b.Navigation("CourseCycles");

                    b.Navigation("CourseModelConnections");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.CourseCycle", b =>
                {
                    b.Navigation("SubCycles");

                    b.Navigation("SubOrders");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.CourseGroup", b =>
                {
                    b.Navigation("GroupOfCourses");

                    b.Navigation("SubGroupsOfCourse");

                    b.Navigation("courseGroups");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.CourseLevel", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.CourseModel", b =>
                {
                    b.Navigation("CourseModelConnections");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Course.CycleModel", b =>
                {
                    b.Navigation("CourseCycle");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Discount.CourseDiscount", b =>
                {
                    b.Navigation("CourseCycles");

                    b.Navigation("SubOrders");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Discount.OrderDiscount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.Order.Order", b =>
                {
                    b.Navigation("SubOrders");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.User.Permission", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.User.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("MiladDarabzadeh.Data.Entities.User.User", b =>
                {
                    b.Navigation("TeacherCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
